def process_single_pdf_five_iterations(pdf_path: str, queries_csv_path: str, previous_year_data: str, output_folder: str = "results"):
    """
    Process a single PDF through the 5-iteration pipeline with enhanced LLM-based flag classification
    Uses multiple LLM calls for better flag selection and classification accuracy
    """
   
    # Create output folder if it doesn't exist
    os.makedirs(output_folder, exist_ok=True)
   
    # Get PDF name without extension
    pdf_name = Path(pdf_path).stem
   
    print(f"\nProcessing: {pdf_name}")
    print("=" * 50)
   
    try:
        # ITERATION 1: Initial red flag identification
        print("Running 1st iteration - Initial Analysis...")
        pipeline_1st = LlamaQueryPipeline(
            pdf_path=pdf_path,
            queries_csv_path=queries_csv_path
        )
       
        # Run 1st iteration
        first_results_df = pipeline_1st.query_llama(maintain_conversation=True, enable_chaining=False)
       
        # Get first response for chaining
        first_response = first_results_df.iloc[0]['response']
       
        # ITERATION 2: Deduplication and cleanup
        print("Running 2nd iteration - Deduplication...")
        second_prompt = """Remove the duplicates from the above context. Also if the Original Quote and Keyword identifies is same remove them."""
       
        second_full_prompt = f"""You must answer the question strictly based on the below given context.
 
    Context:
    {pipeline_1st.docs[0]["context"]}
 
    Previous Analysis: {first_response}
 
    Based on the above analysis and the original context, please answer: {second_prompt}
 
    Answer:"""
       
        second_response = pipeline_1st.llm._call(second_full_prompt)
       
        # ITERATION 3: Categorization of red flags
        print("Running 3rd iteration - Categorization...")
        third_prompt = """You are an expert in financial analysis tasked at categorizing the below identified red flags related to a company's financial health and operations. You need to categorize the red flags into following categories based on their original quotes and the identified keyword.
 
- Balance Sheet Issues: Red flags related to the company's assets, liabilities, equity, debt and overall financial position.
- P&L (Income Statement) Issues: Red flags related to the company's revenues, expenses, profits, and overall financial performance.
- Liquidity Issues: Concerns related to the company's ability to meet its short-term obligations, such as cash flow problems, debt repayment issues, or insufficient working capital.
- Management and Strategy related Issues: Concerns related to leadership, governance, decision-making processes, overall strategy, vision, and direction.
- Regulatory Issues: Concerns related Compliance with laws, regulations.
- Industry and Market Issues: Concerns related Position within the industry, market trends, and competitive landscape.
- Operational Issues: Concerns related Internal processes, systems, and infrastructure.
 
While categorizing the red flags strictly adhere to the following guidelines:
1. Please review the below red flags and assign each one to the most relevant category.
2. Do not loose information from the Original Quotes keep them as it is.
3. If a red flag could fit into multiple categories, please assign it to the one that seems most closely related, do not leave any flag unclassified or fit it into multiple categories.
4. While classifying, classify it in a such a way that the flags come under the categories along with their content. Strictly do not create a new category stick to what is mentioned above like an "Additional Red Flags", classify the flags in the above mentioned category only.
5. Do not repeat a category more than once in the output.
 
**Output Format**:
### Balance Sheet Issues
- [Red flag 1 with original quote]
- [Red flag 2 with original quote]
 
### P&L (Income Statement) Issues
- [Red flag 1 with original quote]
- [Red flag 2 with original quote]
 
### Liquidity Issues
- [Red flag 1 with original quote]
- [Red flag 2 with original quote]
 
### Management and Strategy related Issues
- [Red flag 1 with original quote]
- [Red flag 2 with original quote]
 
### Regulatory Issues
- [Red flag 1 with original quote]
- [Red flag 2 with original quote]
 
### Industry and Market Issues
- [Red flag 1 with original quote]
- [Red flag 2 with original quote]
 
### Operational Issues
- [Red flag 1 with original quote]
- [Red flag 2 with original quote]
 
Continue this format for all categories, ensuring every red flag from the previous analysis is categorized properly."""
       
        third_full_prompt = f"""You must answer the question strictly based on the below given context.
 
    Context:
    {pipeline_1st.docs[0]["context"]}
 
    Previous Analysis: {second_response}
 
    Based on the above analysis and the original context, please answer: {third_prompt}
 
    Answer:"""
       
        third_response = pipeline_1st.llm._call(third_full_prompt)
       
        # ITERATION 4: Detailed summary generation
        print("Running 4th iteration - Summary Generation...")
        fourth_prompt = """Based on the categorized red flags from the previous analysis, provide a comprehensive and detailed summary of each category of red flags in bullet point format. Follow these guidelines:
 
    1. **Retain all information**: Ensure that no details are omitted or lost during the summarization process
    2. **Maintain a neutral tone**: Present the summary in a factual and objective manner, avoiding any emotional or biased language
    3. **Focus on factual content**: Base the summary solely on the information associated with each red flag, without introducing external opinions or assumptions
    4. **Include all red flags**: Incorporate every red flag within the category into the summary, without exception
    5. **Balance detail and concision**: Provide a summary that is both thorough and concise, avoiding unnecessary elaboration while still conveying all essential information
    6. **Incorporate quantitative data**: Wherever possible, include quantitative data and statistics to support the summary and provide additional context
    7. **Category-specific content**: Ensure that the summary is generated based solely on the content present within each category
    8. **Summary should be factual**: Avoid any subjective interpretations or opinions
    9. **Use bullet points**: Each red flag should be summarized as a separate bullet point with key details and data points
 
    Format the output exactly like this example:
    ### Balance Sheet Issues
    * [Summary of red flag 1 with specific data points and factual information]
    * [Summary of red flag 2 with specific data points and factual information]
    * [Summary of red flag 3 with specific data points and factual information]
 
    ### P&L (Income Statement) Issues  
    * [Summary of red flag 1 with specific data points and factual information]
    * [Summary of red flag 2 with specific data points and factual information]
    * [Summary of red flag 3 with specific data points and factual information]
 
    ### Liquidity Issues
    * [Summary of red flag 1 with specific data points and factual information]
    * [Summary of red flag 2 with specific data points and factual information]
 
    ### Management and Strategy related Issues
    * [Summary of red flag 1 with specific data points and factual information]
    * [Summary of red flag 2 with specific data points and factual information]
 
    ### Regulatory Issues
    * [Summary of red flag 1 with specific data points and factual information]
    * [Summary of red flag 2 with specific data points and factual information]
 
    ### Industry and Market Issues
    * [Summary of red flag 1 with specific data points and factual information]
    * [Summary of red flag 2 with specific data points and factual information]
 
    ### Operational Issues
    * [Summary of red flag 1 with specific data points and factual information]
    * [Summary of red flag 2 with specific data points and factual information]
 
    Continue this format for all 7 categories. Each bullet point should be a concise summary that captures the key details of each red flag within that category, including relevant quantitative data where available."""
       
        fourth_full_prompt = f"""You must answer the question strictly based on the below given context.
 
    Context:
    {pipeline_1st.docs[0]["context"]}
 
    Previous Analysis: {third_response}
 
    Based on the above analysis and the original context, please answer: {fourth_prompt}
 
    Answer:"""
       
        fourth_response = pipeline_1st.llm._call(fourth_full_prompt)
       
        # ENHANCED ITERATION 5: Multi-step LLM-based Risk Classification
        print("Running 5th iteration - Enhanced LLM-based Risk Classification...")
       
        # Define risk criteria for each category
        risk_criteria = {
            "Balance Sheet Issues": {
                "debt_increase": "High: Debt increase by >=40% compared to previous reported b/s number; Medium: Debt increase between 25 to 40% compared to previous reported b/s number; Low: Debt increase is less than 25% compared to previous reported b/s number",
                "provisioning": "High: provisioning or write-offs more than 25% of current quarter's EBIDTA; Medium: provisioning or write-offs between 10 to 25% of current quarter's EBIDTA; Low: provisioning or write-offs less than 10% of current quarter's EBIDTA",
                "asset_decline": "High: Asset value falls by >=40% compared to previous reported b/s number; Medium: Asset value falls between 25% to 40% compared to previous reported b/s number; Low: Asset value falls by less than 25% compared to previous reported b/s number",
                "receivable_days": "High: receivable days increase by >=40% compared to previous reported b/s number; Medium: receivable days increase between 25 to 40% compared to previous reported b/s number; Low: receivable days increase is less than 25% compared to previous reported b/s number",
                "payable_days": "High: payable days increase by >=40% compared to previous reported b/s number; Medium: payable days increase between 25 to 40% compared to previous reported b/s number; Low: payable days increase is less than 25% compared to previous reported b/s number",
                "debt_ebitda": "High: Debt/EBITDA > 4x; Medium: Debt/EBITDA 2-4x; Low: Debt/EBITDA < 2x"
            },
            "P&L (Income Statement) Issues": {
                "revenue_decline": "High: revenue or profitability falls by >=40% compared to previous reported quarter number; Medium: revenue or profitability falls between 25% to 40% compared to previous reported quarter number; Low: revenue or profitability falls by less than 25% compared to previous reported quarter number",
                "onetime_expenses": "High: one-time expenses or losses more than 25% of current quarter's EBIDTA; Medium: one-time expenses or losses between 10 to 25% of current quarter's EBIDTA; Low: one-time expenses or losses less than 10% of current quarter's EBIDTA",
                "margin_decline": "High: gross margin or operating margin falling more than 25% compared to previous reported quarter number; Medium: gross margin or operating margin falling between 10 to 25% compared to previous reported quarter number; Low: gross margin or operating margin falling less than 10% compared to previous reported quarter number"
            },
            "Liquidity Issues": {
                "cash_balance": "High: cash balance falling more than 25% compared to previous reported b/s number; Medium: cash balance falling between 10 to 25% compared to previous reported b/s number; Low: cash balance falling less than 10% compared to previous reported b/s number",
                "short_term_debt": "High: Short-term debt or current liabilities increase by >=40% compared to previous reported b/s number; Medium: Short-term debt or current liabilities increase between 25 to 40% compared to previous reported b/s number; Low: Short-term debt or current liabilities increase is less than 25% compared to previous reported b/s number"
            },
            "Management and Strategy related Issues": {
                "management_issues": "High: High management turnover or key personnel departures, Poor track record of execution or delivery, High employee attrition rates; Medium: Some management turnover or key personnel departures, Some concerns around execution or delivery, Moderate employee attrition rates; Low: Low management turnover or key personnel departures, Strong track record of execution or delivery, Low employee attrition rates"
            },
            "Regulatory Issues": {
                "regulatory_compliance": "High: Material non-compliance with regulations or laws, Repeated regulatory issues or warnings; Medium: Some non-compliance with regulations or laws, Some regulatory issues or warnings; Low: No material non-compliance with regulations or laws, No regulatory issues or warnings"
            },
            "Industry and Market Issues": {
                "market_competition": "High: High competitive intensity or new entrants, Material decline in market share; Medium: Some competitive intensity or new entrants, Some decline in market share; Low: Low competitive intensity or new entrants, Stable or increasing market share"
            },
            "Operational Issues": {
                "operational_disruptions": "High: Material disruptions to operations or supply chain, Significant IT or system failures; Medium: Some disruptions to operations or supply chain, Some IT or system failures; Low: No Material disruptions to operations or supply chain, No significant IT or system failures"
            }
        }
       
        # STEP 5A: LLM-based Flag Extraction per Category
        print("Step 5A: Extracting flags per category using LLM...")
        extracted_flags_by_category = {}
        categories = ["Balance Sheet Issues", "P&L (Income Statement) Issues", "Liquidity Issues",
                     "Management and Strategy related Issues", "Regulatory Issues",
                     "Industry and Market Issues", "Operational Issues"]
       
        for category in categories:
            extraction_prompt = f"""
You are a financial analyst. From the categorized red flags provided, extract ONLY the red flags that belong to the "{category}" category.

Categorized Red Flags:
{third_response}

Instructions:
1. Look specifically for the section "### {category}"
2. Extract each red flag listed under this category
3. Maintain the exact original format and content
4. If no flags exist for this category, respond with "No flags found for this category"

Output Format:
List each red flag exactly as it appears under the {category} section, one per line:
- [Red flag 1 with original quote]
- [Red flag 2 with original quote]
- [Red flag 3 with original quote]
"""
           
            extraction_full_prompt = f"""You must answer the question strictly based on the below given context.
 
Context:
{pipeline_1st.docs[0]["context"]}
 
Categorized Analysis: {third_response}
 
Based on the above categorized analysis, please answer: {extraction_prompt}
 
Answer:"""
           
            extracted_flags = pipeline_1st.llm._call(extraction_full_prompt)
            extracted_flags_by_category[category] = extracted_flags
            print(f"Extracted flags for {category}")
       
        # STEP 5B: LLM-based Risk Classification per Category
        print("Step 5B: Classifying risk levels using LLM...")
        fifth_results = []
       
        for category in categories:
            print(f"Classifying risk for: {category}")
           
            # Get extracted flags for this category
            category_flags = extracted_flags_by_category[category]
           
            # Create category-specific prompt
            category_criteria = risk_criteria.get(category, {})
            criteria_text = ""
            for criteria_name, criteria_desc in category_criteria.items():
                criteria_text += f"{criteria_name}: {criteria_desc}\n"
           
            classification_prompt = f"""
You are a financial risk analyst. Classify each red flag in the {category} category into High, Medium, Low, or Not_Applicable risk levels.
 
Criteria for {category}:
{criteria_text}
 
Red flags to classify for {category}:
{category_flags}
 
Previous Year Financial Data:
{previous_year_data}
 
Instructions:
1. Analyze each red flag against the specific criteria for {category}
2. Compare with previous year data where applicable
3. Assign exactly ONE risk level (High/Medium/Low/Not_Applicable) to each flag
4. Provide brief reasoning for each classification
 
Output Format:
### {category} Risk Classification
 
Flag 1: [Brief description of the flag]
Risk Level: High/Medium/Low/Not_Applicable
Reasoning: [Brief explanation based on criteria and data]
 
Flag 2: [Brief description of the flag]
Risk Level: High/Medium/Low/Not_Applicable
Reasoning: [Brief explanation based on criteria and data]
 
Continue for all flags in this category.
 
If no flags exist in this category, state: "No red flags present in this category."
"""
           
            classification_full_prompt = f"""You must answer the question strictly based on the below given context.
 
Context:
{pipeline_1st.docs[0]["context"]}
 
Category Flags: {category_flags}
 
Previous Year Data: {previous_year_data}
 
Based on the above information, please answer: {classification_prompt}
 
Answer:"""
           
            category_response = pipeline_1st.llm._call(classification_full_prompt)
            fifth_results.append({
                "category": category,
                "extracted_flags": category_flags,
                "risk_classification": category_response
            })
       
        # STEP 5C: LLM-based Flag Count and High Risk Summary
        print("Step 5C: Counting flags and summarizing high risks using LLM...")
       
        # Combine all classifications for counting
        all_classifications = ""
        for result in fifth_results:
            all_classifications += f"\n{result['risk_classification']}\n"
       
        counting_prompt = f"""
You are a data analyst. From the risk classifications provided, count the total number of flags at each risk level and extract summaries of HIGH RISK flags only.
 
Risk Classifications:
{all_classifications}
 
Instructions:
1. Count total flags at each level: High, Medium, Low, Not_Applicable
2. For HIGH RISK flags only, extract a brief summary (without the risk level label)
3. Be precise in counting - count each distinct flag only once
 
Output Format:
COUNTS:
High: [number]
Medium: [number]  
Low: [number]
Not_Applicable: [number]
 
HIGH RISK SUMMARIES:
- [Summary of high risk flag 1]
- [Summary of high risk flag 2]
- [Summary of high risk flag 3]
 
If no high risk flags exist, state: "No high risk flags identified"
"""
       
        counting_full_prompt = f"""Based on the risk classifications provided, please answer: {counting_prompt}
 
Risk Classifications:
{all_classifications}
 
Answer:"""
       
        counting_response = pipeline_1st.llm._call(counting_full_prompt)
       
        # Parse the counting response to extract structured data
        risk_data = parse_llm_counting_response(counting_response)
       
        # Extract company information from first page
        print("Extracting company information...")
        company_info = extract_company_info_from_pdf(pdf_path, pipeline_1st.llm)
        print(f"Identified company: {company_info}")
       
        # Parse summary by categories (use 4th iteration for summary in Word doc)
        print("Parsing summary by categories...")
        summary_by_categories = parse_summary_by_categories(fourth_response)
       
        # Create Word document
        print("Creating Word document...")
        word_doc_path = create_word_document(
            pdf_name=pdf_name,
            company_info=company_info,
            risk_data=risk_data,
            summary_by_categories=summary_by_categories,
            output_folder=output_folder
        )
       
        # Save all results together
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        all_results = pd.DataFrame({
            "pdf_name": [pdf_name, pdf_name, pdf_name, pdf_name, pdf_name, pdf_name, pdf_name],
            "iteration": [1, 2, 3, 4, "5A", "5B", "5C"],
            "stage": [
                "Initial Analysis",
                "Deduplication", 
                "Categorization",
                "Summary Generation",
                "Flag Extraction by Category",
                "Risk Classification by Category",
                "Flag Counting and High Risk Summary"
            ],
            "prompt": [
                first_results_df.iloc[0]['query'],
                second_prompt,
                third_prompt,
                fourth_prompt,
                "Extract flags per category",
                "Classify risk levels per category",
                "Count flags and summarize high risks"
            ],
            "response": [
                first_response,
                second_response,
                third_response,
                fourth_response,
                str(extracted_flags_by_category),
                all_classifications,
                counting_response
            ],
            "timestamp": [timestamp, timestamp, timestamp, timestamp, timestamp, timestamp, timestamp]
        })
       
        # Save complete results
        complete_output_file = os.path.join(output_folder, f"{pdf_name}_complete_enhanced_pipeline_results.csv")
        all_results.to_csv(complete_output_file, index=False)
       
        # Save detailed risk classification results
        risk_df = pd.DataFrame(fifth_results)
        risk_output_file = os.path.join(output_folder, f"{pdf_name}_detailed_risk_classification.csv")
        risk_df.to_csv(risk_output_file, index=False)
       
        print(f"Complete enhanced pipeline finished for {pdf_name}!")
        print(f"CSV Results saved to: {complete_output_file}")
        print(f"Risk classification saved to: {risk_output_file}")
        print(f"Word document saved to: {word_doc_path}")
        print(f"NOTE: Used enhanced LLM-based approach with {len(categories) + 2} additional LLM calls for better accuracy")
       
        return all_results
       
    except Exception as e:
        print(f"Error processing {pdf_name}: {str(e)}")
        # Save error log
        error_df = pd.DataFrame({
            "pdf_name": [pdf_name],
            "error": [str(e)],
            "timestamp": [time.strftime("%Y%m%d_%H%M%S")]
        })
        error_file = os.path.join(output_folder, f"{pdf_name}_error_log.csv")
        error_df.to_csv(error_file, index=False)
        return None

def parse_llm_counting_response(counting_response: str) -> Dict:
    """
    Parse the LLM counting response to extract flag counts and high risk summaries
    """
    
    # Initialize default values
    counts = {'High': 0, 'Medium': 0, 'Low': 0, 'Not_Applicable': 0}
    high_summaries = []
    
    lines = counting_response.split('\n')
    in_counts_section = False
    in_summaries_section = False
    
    for line in lines:
        line = line.strip()
        
        # Check for section headers
        if 'COUNTS:' in line.upper():
            in_counts_section = True
            in_summaries_section = False
            continue
        elif 'HIGH RISK SUMMARIES:' in line.upper():
            in_counts_section = False
            in_summaries_section = True
            continue
        
        # Parse counts
        if in_counts_section and ':' in line:
            parts = line.split(':')
            if len(parts) == 2:
                risk_level = parts[0].strip()
                try:
                    count = int(parts[1].strip())
                    if risk_level in counts:
                        counts[risk_level] = count
                except ValueError:
                    pass
        
        # Parse high risk summaries
        if in_summaries_section and line.startswith('-'):
            summary = line[1:].strip()  # Remove the dash
            if summary and not summary.lower().startswith('no high risk'):
                high_summaries.append(summary)
    
    return {
        'High': high_summaries,
        'Medium': [],
        'Low': [],
        'counts': counts
    }
