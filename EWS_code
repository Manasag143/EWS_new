import os
import time
import pandas as pd
import fitz  
import warnings
import hashlib
import logging
import json
from typing import Dict, List, Any
import glob
from pathlib import Path
from docx import Document
from docx.shared import Inches
from docx.enum.text import WD_ALIGN_PARAGRAPH
from docx.oxml.shared import OxmlElement, qn
import re
from openai import AzureOpenAI
import httpx
 
warnings.filterwarnings('ignore')
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
 
def getFilehash(file_path: str):
    """Generate SHA3-256 hash of a file"""
    with open(file_path, 'rb') as f:
        return hashlib.sha3_256(f.read()).hexdigest()
 
class AzureOpenAILLM:
    """Azure OpenAI GPT-4.1-mini LLM class"""
   
    def __init__(self, api_key: str, azure_endpoint: str, api_version: str, deployment_name: str = "gpt-4.1-mini"):
        """
        Initialize Azure OpenAI client
        
        Args:
            api_key: Your Azure OpenAI API key
            azure_endpoint: Your Azure OpenAI endpoint URL
            api_version: API version (e.g., "2024-02-01")
            deployment_name: Your deployment name (default: "gpt-4.1-mini")
        """
        self.deployment_name = deployment_name
        
        # Create httpx client with SSL verification disabled (if needed)
        httpx_client = httpx.Client(verify=False)
        
        # Initialize Azure OpenAI client
        self.client = AzureOpenAI(
            api_key=api_key,
            azure_endpoint=azure_endpoint,
            api_version=api_version,
            http_client=httpx_client
        )
   
    def _call(self, prompt: str, max_tokens: int = 4000, temperature: float = 0.1) -> str:
        """Make API call to Azure OpenAI GPT-4.1-mini"""
        try:
            response = self.client.chat.completions.create(
                model=self.deployment_name,
                messages=[
                    {"role": "user", "content": prompt}
                ],
                max_tokens=max_tokens,
                temperature=temperature,
                top_p=0.95,
                frequency_penalty=0,
                presence_penalty=0
            )
            
            # Extract the response text
            response_text = response.choices[0].message.content
            
            # Log token usage
            if hasattr(response, 'usage'):
                logger.info(f"Tokens used - Prompt: {response.usage.prompt_tokens}, "
                          f"Completion: {response.usage.completion_tokens}, "
                          f"Total: {response.usage.total_tokens}")
            
            return response_text.strip() if response_text else ""
           
        except Exception as e:
            logger.error(f"Azure OpenAI API call failed: {str(e)}")
            return f"Azure OpenAI Call Failed: {str(e)}"
 
class PDFExtractor:
    """Class for extracting text from PDF files"""
   
    def extract_text_from_pdf(self, pdf_path: str) -> List[Dict[str, Any]]:
        """Extract text from each page of a PDF file"""
        start_time = time.time()
        try:
            doc = fitz.open(pdf_path)
            pages = []
           
            for page_num, page in enumerate(doc):
                text = page.get_text()
                pages.append({
                    "page_num": page_num + 1,
                    "text": text
                })
           
            # Explicitly close the document to free memory
            doc.close()
            logger.info(f"PDF text extraction took {time.time() - start_time:.2f} seconds")
            return pages
           
        except Exception as e:
            logger.error(f"PDF extraction error: {e}")
            raise
 
def mergeDocs(pdf_path: str, split_pages: bool = False) -> List[Dict[str, Any]]:
    """Merge PDF documents into a single context"""
    extractor = PDFExtractor()
    pages = extractor.extract_text_from_pdf(pdf_path)
   
    if split_pages:
        return [{"context": page["text"], "page_num": page["page_num"]} for page in pages]
    else:
        # Merge all pages into single context
        all_text = "\n".join([page["text"] for page in pages])
        return [{"context": all_text}]
 
class LlamaQueryPipeline:
    """Main pipeline class for querying PDF content with Azure OpenAI GPT-4.1-mini"""
   
    def __init__(self, pdf_path: str, queries_csv_path: str = None, 
                 api_key: str = None, azure_endpoint: str = None, 
                 api_version: str = None, deployment_name: str = "gpt-4.1-mini",
                 previous_results_path: str = None):
        """
        Initialize the pipeline with Azure OpenAI
        
        Args:
            pdf_path: Path to PDF file
            queries_csv_path: Path to queries CSV/Excel file
            api_key: Azure OpenAI API key
            azure_endpoint: Azure OpenAI endpoint
            api_version: API version
            deployment_name: Deployment name
            previous_results_path: Path to previous results
        """
        # Initialize Azure OpenAI LLM
        self.llm = AzureOpenAILLM(
            api_key=api_key or os.getenv("AZURE_OPENAI_API_KEY"),
            azure_endpoint=azure_endpoint or os.getenv("AZURE_OPENAI_ENDPOINT"), 
            api_version=api_version or os.getenv("AZURE_OPENAI_API_VERSION", "2024-02-01"),
            deployment_name=deployment_name
        )
        
        self.docs = mergeDocs(pdf_path, split_pages=False)
       
        # Load queries from Excel or CSV (only if provided)
        if queries_csv_path:
            if queries_csv_path.endswith('.xlsx'):
                queries_df = pd.read_excel(queries_csv_path)
            else:
                queries_df = pd.read_csv(queries_csv_path)
            self.queries = queries_df["prompt"].tolist()
        else:
            self.queries = []
           
        self.pdf_path = pdf_path
        self.pdf_name = Path(pdf_path).stem  # Get filename without extension
       
        # Load previous results if provided
        self.previous_results = None
        if previous_results_path and os.path.exists(previous_results_path):
            self.previous_results = pd.read_csv(previous_results_path)
   
    def query_llama_with_chaining(self, new_queries_csv_path: str, iteration_number: int = 2) -> pd.DataFrame:
        """Query the Azure OpenAI API using previous results for chaining"""
        if self.previous_results is None:
            raise ValueError("No previous results loaded. Please provide previous_results_path in __init__")
       
        # Load new queries
        if new_queries_csv_path.endswith('.xlsx'):
            new_queries_df = pd.read_excel(new_queries_csv_path)
        else:
            new_queries_df = pd.read_csv(new_queries_csv_path)
       
        new_queries = new_queries_df["prompt"].tolist()
       
        sys_prompt = f"""You must answer the question strictly based on the below given context.
 
Context:
{self.docs[0]["context"]}
 
"""
       
        results = []
       
        # Process each new query with corresponding previous response
        for i, new_query in enumerate(new_queries):
            start = time.perf_counter()
           
            try:
                # Get the corresponding previous response (if available)
                if i < len(self.previous_results):
                    # Check if it's 3rd iteration (chained results) or 2nd iteration (original results)
                    if 'chained_response' in self.previous_results.columns:
                        previous_response = self.previous_results.iloc[i]['chained_response']
                    else:
                        previous_response = self.previous_results.iloc[i]['response']
                   
                    # Create chained prompt: new query + previous response
                    chained_prompt = f"""Previous Analysis: {previous_response}
 
Based on the above analysis and the original context, please answer: {new_query}
 
Answer:"""
                else:
                    # If no previous response available, use regular prompt
                    chained_prompt = f"""Question: {new_query}
Answer:"""
               
                full_prompt = f"{sys_prompt}\n{chained_prompt}"
               
                # Get response from Azure OpenAI
                response_text = self.llm._call(full_prompt, max_tokens=4000)
                end = time.perf_counter()
               
                # Calculate token approximations (more accurate with OpenAI response)
                input_tokens = len(full_prompt.split())
                completion_tokens = len(response_text.split()) if response_text else 0
               
                usage = {
                    "iteration": iteration_number,
                    "query_id": i + 1,
                    "original_query": new_queries_df.iloc[i]["prompt"] if i < len(new_queries_df) else new_query,
                    "previous_response": previous_response if i < len(self.previous_results) else "",
                    "new_query": new_query,
                    "chained_response": response_text,
                    "completion_tokens": completion_tokens,
                    "input_tokens": input_tokens,
                    "response_time": f"{end - start:.2f}"
                }
               
            except Exception as e:
                end = time.perf_counter()
               
                usage = {
                    "iteration": iteration_number,
                    "query_id": i + 1,
                    "original_query": new_queries_df.iloc[i]["prompt"] if i < len(new_queries_df) else new_query,
                    "previous_response": previous_response if i < len(self.previous_results) else "",
                    "new_query": new_query,
                    "chained_response": f"Error: {str(e)}",
                    "completion_tokens": None,
                    "input_tokens": None,
                    "response_time": f"{end - start:.2f}"
                }
           
            results.append(usage)
       
        return pd.DataFrame(results)
 
    def query_llama(self, maintain_conversation: bool = True, enable_chaining: bool = False) -> pd.DataFrame:
        """Query the Azure OpenAI API for a list of queries using the provided context"""
        sys_prompt = f"""You are a financial analyst expert specializing in identifying red flags from earnings call transcripts and financial documents.
 
COMPLETE DOCUMENT TO ANALYZE:
{self.docs[0]["context"]}
 
Your task is to analyze the ENTIRE document above and identify ALL potential red flags.
 
CRITICAL OUTPUT FORMAT REQUIREMENTS:
- Number each red flag sequentially (1, 2, 3, etc.)
- Start each entry with: "The potential red flag you observed - [brief description]"
- Follow with "Original Quote:" and then the exact quote with speaker names
- Include page references where available: (Page X)
- Ensure comprehensive analysis of the entire document
- Do not miss any sections or concerning statements
 
EXAMPLE FORMAT:
1. The potential red flag you observed - Debt reduction is lower than expected  
Original Quote:  
"Vikrant Kashyap: Have you -- are you able to reduce any debt in quarter one in Middle East and India?  
Ramesh Kalyanaraman: So India, we are not reduced, but the cash balance has been increased to around INR75 crores, but we have not reduced any debt in Q1 in India and Middle East because Middle East we have not converted any showroom in Q1." (Page 9)  
 
2. The potential red flag you observed - Margin pressure/Competition intensifying/Cost inflation  
Original Quote:  
"Pulkit Singhal: Thank you for the opportunity and congrats on the good set of performance. Just the first question is really on the margins, which seems to have been elusive. I mean looking at the company for the last two years, we seem to be executing quite well in terms of store expansions and revenue growth and clearly delivering higher than expected there. But margin expansion just has been completely elusive.  
And I find it surprising your comment that while growing at 30% growth and 12% SSSG, I mean, which is quite healthy, you're still talking about high competitive intensity kind of quite contradictory that with such high growth rates, we have to invest so high. So can you talk about this a bit more? I mean we don't expect with lower revenue growth rates that you would not have to invest in the business. And it's only during a higher revenue growth that you expect margin expansion.  
Ramesh Kalyanaraman: Yes. So you're right. We are -- meaning somewhere we have missed out on the operating leverage for advertisements that's why I told you that even Q1, it was a miss. And regarding competition, I will tell you where in new markets, where we assume that we will not spend too much because the brand is already aware and the location is the only thing which has to be communicated.  
When you see the local players, regional players or the micro market players there becoming extremely active because of our showroom launch then we will have to increase the noise level there. Otherwise, we will lose our market share. And existing local players they increase their activity around our launch time. So that is where we also put more money so that we don't end up losing the market share or we don't end up taking out lesser from the competition." (Page 12-13)  
 
3. The potential red flag you observed - Debt high/Increase in borrowing cost  
Original Quote:  
"Vikrant Kashyap: My question is how are you going to address this? Because if you continue to grow at a higher level, but bottom line is not expanding related to the top line, it will going to impact your overall performance? So, what are the steps you are taking to improve the bottom line in the businesses  
Sanjay Raghuraman: Finance costs will be taken care because we told you when we convert stores, that money is going to reduce our debt. Okay. And again, FOCO, when you do FOCO showrooms, the margins will come down. And surely, that will have an impact on the gross margin. Okay. And interest, if you look at actually, the interest rates have been going up last year. So next year, that will be the base, right? So then again, we will not have this kind of issue is what we feel. So interest rates have been going up over the past year, one year, in that region.  
And we are also beginning to repay loans now because of conversion. So all put together, interest part will be taken care but other area where FOCO showrooms will surely reduce our margin. We cannot have the own store margin. So that should be the way we should look at it." (Page 9)
 
Continue this exact format for ALL red flags identified throughout the document.
 
"""
       
        prompt_template = """Question: {query}
 
Analyze the complete document and provide ALL red flags in the exact numbered format specified above. Be thorough and comprehensive - cover the entire document.
 
Answer:"""
       
        conversation_history = ""
        results = []
        previous_output = ""  # For prompt chaining
       
        for i, query in enumerate(self.queries, 1):
            start = time.perf_counter()
           
            try:
                if enable_chaining and i > 1 and previous_output:
                    chained_query = f"{query}\n\nPrevious context: {previous_output}"
                else:
                    chained_query = query
               
                if maintain_conversation and conversation_history:
                    full_prompt = f"{sys_prompt}\n{conversation_history}\n{prompt_template.format(query=chained_query)}"
                else:
                    full_prompt = f"{sys_prompt}\n{prompt_template.format(query=chained_query)}"
               
                # Use higher max_tokens for comprehensive analysis
                response_text = self.llm._call(full_prompt, max_tokens=4000)
                end = time.perf_counter()
               
                input_tokens = len(full_prompt.split())
                completion_tokens = len(response_text.split()) if response_text else 0
               
                usage = {
                    "query_id": i,
                    "query": query,
                    "chained_query": chained_query if enable_chaining else query,
                    "response": response_text,
                    "completion_tokens": completion_tokens,
                    "input_tokens": input_tokens,
                    "response_time": f"{end - start:.2f}"
                }
               
                # Update conversation history for next iteration
                if maintain_conversation:
                    conversation_history += f"\nQuestion: {chained_query}\nAnswer: {response_text}\n"
               
                # Store output for next chaining iteration
                if enable_chaining:
                    previous_output = response_text
               
            except Exception as e:
                end = time.perf_counter()
               
                usage = {
                    "query_id": i,
                    "query": query,
                    "chained_query": query,
                    "response": f"Error: {str(e)}",
                    "completion_tokens": None,
                    "input_tokens": None,
                    "response_time": f"{end - start:.2f}"
                }
               
                if enable_chaining:
                    previous_output = ""
           
            results.append(usage)
       
        return pd.DataFrame(results)
   
    def save_results(self, results_df: pd.DataFrame, output_path: str = None):
        """Save results to CSV file"""
        if output_path is None:
            # Generate filename based on PDF name and timestamp
            timestamp = time.strftime("%Y%m%d_%H%M%S")
            output_path = f"azure_openai_query_results_{self.pdf_name}_{timestamp}.csv"
       
        results_df.to_csv(output_path, index=False)
        return output_path
 
def extract_company_info_from_pdf(pdf_path: str, llm: AzureOpenAILLM) -> str:
    """Extract company name, quarter, and financial year from first page of PDF"""
    try:
        doc = fitz.open(pdf_path)
        first_page_text = doc[0].get_text()
        doc.close()
       
        # Limit text to first 2000 characters to avoid token limits
        first_page_text = first_page_text[:2000]
       
        prompt = f"""
You are a financial document analyst. Extract the company name, quarter, and financial year from the following text which is from the first page of an earnings call transcript or financial document.
 
Text from first page:
{first_page_text}
 
Please identify:
1. Company Name (full company name including Ltd/Limited/Inc etc.)
2. Quarter (Q1/Q2/Q3/Q4)
3. Financial Year (FY23/FY24/FY25 etc.)
 
Format your response as: [Company Name]-[Quarter][Financial Year]
Example: Reliance Industries Limited-Q4FY25
 
If you cannot find clear information, make the best estimate based on available data.
 
Response:"""
       
        response = llm._call(prompt, max_tokens=200)
        # Clean the response to get just the formatted string
        response_lines = response.strip().split('\n')
        for line in response_lines:
            if '-Q' in line and 'FY' in line:
                return line.strip()
       
        # Fallback - return first non-empty line
        return response_lines[0].strip() if response_lines else "Unknown Company-Q1FY25"
       
    except Exception as e:
        logger.error(f"Error extracting company info: {e}")
        return "Unknown Company-Q1FY25"

def remove_duplicates_from_response(response_text: str) -> str:
    """Remove duplicate red flags based on content similarity"""
    lines = response_text.split('\n')
    unique_flags = []
    seen_descriptions = set()
    
    current_flag = ""
    current_description = ""
    
    for line in lines:
        line = line.strip()
        
        # Check if this is a new red flag (starts with number)
        if re.match(r'^\d+\.', line):
            # Process previous flag if exists
            if current_flag and current_description:
                # Create a normalized version for comparison
                normalized_desc = re.sub(r'[^\w\s]', '', current_description.lower())
                normalized_desc = ' '.join(normalized_desc.split())
                
                # Check for duplicates based on description similarity
                is_duplicate = False
                for seen_desc in seen_descriptions:
                    # Calculate similarity (simple word overlap)
                    words1 = set(normalized_desc.split())
                    words2 = set(seen_desc.split())
                    overlap = len(words1.intersection(words2))
                    total = len(words1.union(words2))
                    similarity = overlap / total if total > 0 else 0
                    
                    if similarity > 0.7:  # 70% similarity threshold
                        is_duplicate = True
                        break
                
                if not is_duplicate:
                    unique_flags.append(current_flag)
                    seen_descriptions.add(normalized_desc)
            
            # Start new flag
            current_flag = line + '\n'
            # Extract description from the flag line
            desc_match = re.search(r'The potential red flag you observed - (.+)', line)
            current_description = desc_match.group(1) if desc_match else ""
            
        else:
            # Continue building current flag
            current_flag += line + '\n'
    
    # Don't forget the last flag
    if current_flag and current_description:
        normalized_desc = re.sub(r'[^\w\s]', '', current_description.lower())
        normalized_desc = ' '.join(normalized_desc.split())
        
        is_duplicate = False
        for seen_desc in seen_descriptions:
            words1 = set(normalized_desc.split())
            words2 = set(seen_desc.split())
            overlap = len(words1.intersection(words2))
            total = len(words1.union(words2))
            similarity = overlap / total if total > 0 else 0
            
            if similarity > 0.7:
                is_duplicate = True
                break
        
        if not is_duplicate:
            unique_flags.append(current_flag)
    
    return '\n'.join(unique_flags)

def create_individual_criteria_prompts() -> Dict[str, str]:
    """Create 15 individual prompts for different criteria evaluation"""
    
    criteria_prompts = {
        "debt_increase": """
Based on the deduplicated red flags analysis, evaluate if there are any red flags specifically related to debt increases.

Look for:
- Total debt increases compared to previous periods
- Long-term debt changes
- Borrowing increases
- Debt restructuring issues

Classification levels:
- High: Debt increase by >=40% compared to previous reported balance sheet number
- Medium: Debt increase between 25 to 40% compared to previous reported balance sheet number  
- Low: Debt increase is less than 25% compared to previous reported balance sheet number
- Not_Applicable: No debt increase red flags found

Provide a brief summary (without original quotes) and classify the risk level.

Format:
**Debt Increase Risk Assessment:**
Summary: [Brief summary of debt-related concerns if any]
Risk Level: [High/Medium/Low/Not_Applicable]
""",

        "provisioning": """
Based on the deduplicated red flags analysis, evaluate if there are any red flags specifically related to provisioning and write-offs.

Look for:
- Provisioning for bad debts
- Write-offs mentioned
- Impairment charges
- Credit loss provisions

Classification levels:
- High: Provisioning or write-offs more than 25% of current quarter's EBITDA
- Medium: Provisioning or write-offs between 10 to 25% of current quarter's EBITDA
- Low: Provisioning or write-offs less than 10% of current quarter's EBITDA
- Not_Applicable: No provisioning red flags found

Provide a brief summary (without original quotes) and classify the risk level.

Format:
**Provisioning Risk Assessment:**
Summary: [Brief summary of provisioning-related concerns if any]
Risk Level: [High/Medium/Low/Not_Applicable]
""",

        "asset_decline": """
Based on the deduplicated red flags analysis, evaluate if there are any red flags specifically related to asset value decline.

Look for:
- Asset value decreases
- Asset impairment
- Fixed asset write-downs
- Investment value declines

Classification levels:
- High: Asset value falls by >=40% compared to previous reported balance sheet number
- Medium: Asset value falls between 25% to 40% compared to previous reported balance sheet number
- Low: Asset value falls by less than 25% compared to previous reported balance sheet number
- Not_Applicable: No asset decline red flags found

Provide a brief summary (without original quotes) and classify the risk level.

Format:
**Asset Decline Risk Assessment:**
Summary: [Brief summary of asset decline concerns if any]
Risk Level: [High/Medium/Low/Not_Applicable]
""",

        "receivable_days": """
Based on the deduplicated red flags analysis, evaluate if there are any red flags specifically related to receivable days increase.

Look for:
- Receivable days increase
- Collection period extension
- Accounts receivable growth
- Customer payment delays

Classification levels:
- High: Receivable days increase by >=40% compared to previous reported balance sheet number
- Medium: Receivable days increase between 25 to 40% compared to previous reported balance sheet number
- Low: Receivable days increase is less than 25% compared to previous reported balance sheet number
- Not_Applicable: No receivable days red flags found

Provide a brief summary (without original quotes) and classify the risk level.

Format:
**Receivable Days Risk Assessment:**
Summary: [Brief summary of receivable days concerns if any]
Risk Level: [High/Medium/Low/Not_Applicable]
""",

        "payable_days": """
Based on the deduplicated red flags analysis, evaluate if there are any red flags specifically related to payable days increase.

Look for:
- Payable days increase
- Payment period extension
- Accounts payable growth
- Supplier payment delays

Classification levels:
- High: Payable days increase by >=40% compared to previous reported balance sheet number
- Medium: Payable days increase between 25 to 40% compared to previous reported balance sheet number
- Low: Payable days increase is less than 25% compared to previous reported balance sheet number
- Not_Applicable: No payable days red flags found

Provide a brief summary (without original quotes) and classify the risk level.

Format:
**Payable Days Risk Assessment:**
Summary: [Brief summary of payable days concerns if any]
Risk Level: [High/Medium/Low/Not_Applicable]
""",

        "debt_ebitda": """
Based on the deduplicated red flags analysis, evaluate if there are any red flags specifically related to debt-to-EBITDA ratio.

Look for:
- Debt/EBITDA ratio mentions
- High leverage concerns
- Coverage ratio issues
- Debt serviceability problems

Classification levels:
- High: Debt/EBITDA > 4x
- Medium: Debt/EBITDA 2-4x
- Low: Debt/EBITDA < 2x
- Not_Applicable: No debt/EBITDA red flags found

Provide a brief summary (without original quotes) and classify the risk level.

Format:
**Debt EBITDA Risk Assessment:**
Summary: [Brief summary of debt/EBITDA concerns if any]
Risk Level: [High/Medium/Low/Not_Applicable]
""",

        "revenue_decline": """
Based on the deduplicated red flags analysis, evaluate if there are any red flags specifically related to revenue decline.

Look for:
- Revenue decreases
- Sales decline
- Top-line reduction
- Income statement revenue issues

Classification levels:
- High: Revenue or profitability falls by >=25% compared to previous reported quarter number
- Medium: Revenue or profitability falls between 10% to 25% compared to previous reported quarter number
- Low: Revenue or profitability falls by less than 10% compared to previous reported quarter number
- Not_Applicable: No revenue decline red flags found

Provide a brief summary (without original quotes) and classify the risk level.

Format:
**Revenue Decline Risk Assessment:**
Summary: [Brief summary of revenue decline concerns if any]
Risk Level: [High/Medium/Low/Not_Applicable]
""",

        "onetime_expenses": """
Based on the deduplicated red flags analysis, evaluate if there are any red flags specifically related to one-time expenses.

Look for:
- One-time charges
- Exceptional expenses
- Non-recurring costs
- Special items or extraordinary expenses

Classification levels:
- High: One-time expenses or losses more than 25% of current quarter's EBITDA
- Medium: One-time expenses or losses between 10 to 25% of current quarter's EBITDA
- Low: One-time expenses or losses less than 10% of current quarter's EBITDA
- Not_Applicable: No one-time expenses red flags found

Provide a brief summary (without original quotes) and classify the risk level.

Format:
**One-time Expenses Risk Assessment:**
Summary: [Brief summary of one-time expenses concerns if any]
Risk Level: [High/Medium/Low/Not_Applicable]
""",

        "margin_decline": """
Based on the deduplicated red flags analysis, evaluate if there are any red flags specifically related to margin decline.

Look for:
- Gross margin decline
- Operating margin compression
- EBITDA margin reduction
- Profitability margin issues

Classification levels:
- High: Gross margin or operating margin falling more than 25% compared to previous reported quarter number
- Medium: Gross margin or operating margin falling between 10 to 25% compared to previous reported quarter number
- Low: Gross margin or operating margin falling less than 10% compared to previous reported quarter number
- Not_Applicable: No margin decline red flags found

Provide a brief summary (without original quotes) and classify the risk level.

Format:
**Margin Decline Risk Assessment:**
Summary: [Brief summary of margin decline concerns if any]
Risk Level: [High/Medium/Low/Not_Applicable]
""",

        "cash_balance": """
Based on the deduplicated red flags analysis, evaluate if there are any red flags specifically related to cash balance decline.

Look for:
- Cash balance decreases
- Cash flow negative trends
- Liquidity reduction
- Cash position deterioration

Classification levels:
- High: Cash balance falling more than 25% compared to previous reported balance sheet number
- Medium: Cash balance falling between 10 to 25% compared to previous reported balance sheet number
- Low: Cash balance falling less than 10% compared to previous reported balance sheet number
- Not_Applicable: No cash balance red flags found

Provide a brief summary (without original quotes) and classify the risk level.

Format:
**Cash Balance Risk Assessment:**
Summary: [Brief summary of cash balance concerns if any]
Risk Level: [High/Medium/Low/Not_Applicable]
""",

        "short_term_debt": """
Based on the deduplicated red flags analysis, evaluate if there are any red flags specifically related to short-term debt increase.

Look for:
- Short-term debt increases
- Current liabilities growth
- Working capital issues
- Short-term borrowing increases

Classification levels:
- High: Short-term debt or current liabilities increase by >=40% compared to previous reported balance sheet number
- Medium: Short-term debt or current liabilities increase between 25 to 40% compared to previous reported balance sheet number
- Low: Short-term debt or current liabilities increase is less than 25% compared to previous reported balance sheet number
- Not_Applicable: No short-term debt red flags found

Provide a brief summary (without original quotes) and classify the risk level.

Format:
**Short-term Debt Risk Assessment:**
Summary: [Brief summary of short-term debt concerns if any]
Risk Level: [High/Medium/Low/Not_Applicable]
""",

        "management_issues": """
Based on the deduplicated red flags analysis, evaluate if there are any red flags specifically related to management and leadership issues.

Look for:
- Management turnover
- Key personnel departures
- Leadership changes
- Governance issues
- Strategic execution problems

Classification levels:
- High: Any management turnover or key personnel departures, Poor track record of execution or delivery, High employee attrition rates
- Low: No management turnover or key personnel departures, Strong track record of execution or delivery, Low employee attrition rates
- Not_Applicable: No management issues red flags found

Provide a brief summary (without original quotes) and classify the risk level.

Format:
**Management Issues Risk Assessment:**
Summary: [Brief summary of management concerns if any]
Risk Level: [High/Low/Not_Applicable]
""",

        "regulatory_compliance": """
Based on the deduplicated red flags analysis, evaluate if there are any red flags specifically related to regulatory compliance.

Look for:
- Regulatory violations
- Compliance issues
- Legal problems
- Regulatory warnings or penalties

Classification levels:
- High: If found any regulatory issues as a concern or a conclusion of any discussion related to regulatory issues or warning(s) from the regulators
- Low: If there is no clear concern for the company based on the discussion on the regulatory issues
- Not_Applicable: No regulatory compliance red flags found

Provide a brief summary (without original quotes) and classify the risk level.

Format:
**Regulatory Compliance Risk Assessment:**
Summary: [Brief summary of regulatory concerns if any]
Risk Level: [High/Low/Not_Applicable]
""",

        "market_competition": """
Based on the deduplicated red flags analysis, evaluate if there are any red flags specifically related to market competition.

Look for:
- Competitive pressure
- Market share loss
- New competitors entering
- Industry competition intensifying

Classification levels:
- High: Any competitive intensity or new entrants, Any decline in market share
- Low: Low competitive intensity or new entrants, Stable or increasing market share
- Not_Applicable: No market competition red flags found

Provide a brief summary (without original quotes) and classify the risk level.

Format:
**Market Competition Risk Assessment:**
Summary: [Brief summary of competition concerns if any]
Risk Level: [High/Low/Not_Applicable]
""",

        "operational_disruptions": """
Based on the deduplicated red flags analysis, evaluate if there are any red flags specifically related to operational disruptions.

Look for:
- Supply chain disruptions
- Production issues
- IT system failures
- Operational inefficiencies
- Infrastructure problems

Classification levels:
- High: If found any operational or supply chain issues as a concern or a conclusion of any discussion related to operational issues
- Low: If there is no clear concern for the company based on the discussion on the operational or supply chain issues
- Not_Applicable: No operational disruption red flags found

Provide a brief summary (without original quotes) and classify the risk level.

Format:
**Operational Disruptions Risk Assessment:**
Summary: [Brief summary of operational concerns if any]
Risk Level: [High/Low/Not_Applicable]
"""
    }
    
    return criteria_prompts

def parse_individual_risk_assessment(response_text: str) -> Dict[str, Any]:
    """Parse individual risk assessment response to extract summary and risk level"""
    
    # Extract summary
    summary_match = re.search(r'Summary:\s*(.+?)(?=Risk Level:|$)', response_text, re.DOTALL)
    summary = summary_match.group(1).strip() if summary_match else "No summary provided"
    
    # Extract risk level
    risk_level_match = re.search(r'Risk Level:\s*([^\n]+)', response_text)
    risk_level = risk_level_match.group(1).strip() if risk_level_match else "Not_Applicable"
    
    # Clean up the risk level
    risk_level = risk_level.replace('[', '').replace(']', '').strip()
    
    # Truncate summary to 1-2 lines (approximately 100-150 characters)
    if len(summary) > 150:
        # Find the first sentence or reasonable break point
        sentences = summary.split('. ')
        if len(sentences) > 1 and len(sentences[0]) < 150:
            summary = sentences[0] + '.'
        else:
            summary = summary[:147] + '...'
    
    return {
        'summary': summary,
        'risk_level': risk_level
    }

def calculate_flag_distribution(criteria_results: List[Dict]) -> Dict[str, int]:
    """Calculate flag distribution from individual criteria results"""
    
    distribution = {
        'High': 0,
        'Medium': 0,
        'Low': 0,
        'Not_Applicable': 0
    }
    
    for result in criteria_results:
        risk_level = result.get('parsed_result', {}).get('risk_level', 'Not_Applicable')
        
        # Normalize risk level
        if 'High' in risk_level:
            distribution['High'] += 1
        elif 'Medium' in risk_level:
            distribution['Medium'] += 1
        elif 'Low' in risk_level:
            distribution['Low'] += 1
        else:
            distribution['Not_Applicable'] += 1
    
    return distribution

def create_enhanced_summary(criteria_results: List[Dict]) -> List[str]:
    """Create enhanced summary for HIGH RISK flags only with 1-2 line summaries"""
    
    high_risk_summaries = []
    
    for result in criteria_results:
        parsed = result.get('parsed_result', {})
        risk_level = parsed.get('risk_level', 'Not_Applicable')
        summary = parsed.get('summary', 'No summary available')
        
        # Only include HIGH RISK flags (matching original code logic)
        if 'High' in risk_level and 'No' not in summary and 'Not_Applicable' not in risk_level:
            # Ensure summary is 1-2 lines only
            if len(summary) > 150:
                sentences = summary.split('. ')
                if len(sentences) > 1 and len(sentences[0]) < 150:
                    summary = sentences[0] + '.'
                else:
                    summary = summary[:147] + '...'
            
            high_risk_summaries.append(summary)
    
    return high_risk_summaries

def parse_summary_by_categories(fourth_response: str) -> Dict[str, List[str]]:
    """Parse the 4th iteration summary response by categories - SAME AS ORIGINAL"""
    categories_summary = {}
   
    # Split by ### headers
    sections = fourth_response.split('###')
   
    for section in sections:
        if not section.strip():
            continue
           
        lines = section.split('\n')
        category_name = ""
        bullets = []
       
        for line in lines:
            line = line.strip()
            if line and not line.startswith('*') and not line.startswith('-'):
                # This is likely the category name
                category_name = line.strip()
            elif line.startswith('*') or line.startswith('-'):
                # This is a bullet point
                bullet_text = line[1:].strip()  # Remove bullet symbol
                if bullet_text:
                    bullets.append(bullet_text)
       
        if category_name and bullets:
            categories_summary[category_name] = bullets
   
    return categories_summary

def create_word_document(pdf_name: str, company_info: str, flag_distribution: Dict[str, int],
                        high_risk_summaries: List[str], summary_by_categories: Dict[str, List[str]], 
                        output_folder: str) -> str:
    """Create a formatted Word document with the analysis results - SAME FORMAT AS ORIGINAL"""
   
    # Create new document
    doc = Document()
   
    # Set document title
    title = doc.add_heading(company_info, 0)
    title.alignment = WD_ALIGN_PARAGRAPH.CENTER
   
    # Add Flag Distribution section
    flag_dist_heading = doc.add_heading('Flag Distribution:', level=2)
    flag_dist_heading.runs[0].bold = True
   
    # Create table for flag distribution (SAME AS ORIGINAL - 4 rows, not 5)
    table = doc.add_table(rows=4, cols=2)
    table.style = 'Table Grid'
   
    # Add table headers and data using extracted counts (SAME AS ORIGINAL)
    high_count = flag_distribution['High']
    medium_count = flag_distribution['Medium']
    low_count = flag_distribution['Low']
    total_count = high_count + medium_count + low_count
   
    table.cell(0, 0).text = 'High Risk'
    table.cell(0, 1).text = str(high_count)
    table.cell(1, 0).text = 'Medium Risk'
    table.cell(1, 1).text = str(medium_count)
    table.cell(2, 0).text = 'Low Risk'
    table.cell(2, 1).text = str(low_count)
    table.cell(3, 0).text = 'Total Flags'
    table.cell(3, 1).text = str(total_count)
   
    # Make table headers bold
    for i in range(4):
        table.cell(i, 0).paragraphs[0].runs[0].bold = True
   
    # Add space
    doc.add_paragraph('')
   
    # Add High Risk Flags section only (SAME AS ORIGINAL)
    if high_risk_summaries:
        high_risk_heading = doc.add_heading('High Risk Flags:', level=2)
        high_risk_heading.runs[0].bold = True
       
        for flag in high_risk_summaries:
            p = doc.add_paragraph()
            p.style = 'List Bullet'
            p.add_run(flag)
    else:
        # If no high risk flags, add a note (SAME AS ORIGINAL)
        high_risk_heading = doc.add_heading('High Risk Flags:', level=2)
        high_risk_heading.runs[0].bold = True
        no_flags_para = doc.add_paragraph('No high risk flags identified.')
   
    # Add horizontal line (SAME AS ORIGINAL)
    doc.add_paragraph('_' * 50)
   
    # Add Summary section (SAME AS ORIGINAL)
    summary_heading = doc.add_heading('Summary', level=1)
    summary_heading.runs[0].bold = True
   
    # Add categorized summary (SAME AS ORIGINAL)
    for category, bullets in summary_by_categories.items():
        if bullets:  # Only add if there are bullets
            # Add category as subheading
            cat_heading = doc.add_heading(category, level=2)
            cat_heading.runs[0].bold = True
           
            # Add bullet points for this category
            for bullet in bullets:
                p = doc.add_paragraph()
                p.style = 'List Bullet'
                p.add_run(bullet)
           
            # Add space between categories
            doc.add_paragraph('')
   
    # Save document (SAME FILENAME AS ORIGINAL)
    doc_filename = f"{pdf_name}_Report.docx"
    doc_path = os.path.join(output_folder, doc_filename)
    doc.save(doc_path)
   
    return doc_path

def process_single_pdf_enhanced_five_iterations(pdf_path: str, queries_csv_path: str, previous_year_data: str, 
                                              output_folder: str = "results", 
                                              api_key: str = None, azure_endpoint: str = None, 
                                              api_version: str = None, deployment_name: str = "gpt-4.1-mini"):
    """
    Process a single PDF through the enhanced 5-iteration pipeline with individual criteria evaluation
    """
   
    # Create output folder if it doesn't exist
    os.makedirs(output_folder, exist_ok=True)
   
    # Get PDF name without extension
    pdf_name = Path(pdf_path).stem
   
    print(f"\nProcessing: {pdf_name}")
    print("=" * 50)
   
    try:
        # ITERATION 1: Initial red flag identification
        print("Running 1st iteration - Initial Analysis...")
        pipeline_1st = LlamaQueryPipeline(
            pdf_path=pdf_path,
            queries_csv_path=queries_csv_path,
            api_key=api_key,
            azure_endpoint=azure_endpoint,
            api_version=api_version,
            deployment_name=deployment_name
        )
       
        # Run 1st iteration
        first_results_df = pipeline_1st.query_llama(maintain_conversation=True, enable_chaining=False)
        first_response = first_results_df.iloc[0]['response']
       
        # ITERATION 2: Enhanced Deduplication and cleanup
        print("Running 2nd iteration - Enhanced Deduplication...")
        
        # First remove duplicates using the enhanced function
        deduplicated_response = remove_duplicates_from_response(first_response)
        
        second_prompt = """Remove any remaining duplicates from the above red flags analysis. Also clean up the formatting and ensure each red flag is unique and clearly distinct. Remove any flags that are essentially saying the same thing with different wording."""
       
        second_full_prompt = f"""You must answer the question strictly based on the below given context.
 
Context:
{pipeline_1st.docs[0]["context"]}
 
Previous Analysis (Already Deduplicated): {deduplicated_response}
 
Based on the above analysis and the original context, please answer: {second_prompt}
 
Answer:"""
       
        second_response = pipeline_1st.llm._call(second_full_prompt, max_tokens=4000)
       
        # ITERATION 3: Categorization of red flags
        print("Running 3rd iteration - Categorization...")
        third_prompt = """You are an expert in financial analysis tasked at categorizing the below identified red flags related to a company's financial health and operations. You need to categorize the red flags into following categories based on their original quotes and the identified keyword.
 
- Balance Sheet Issues: Red flags related to the company's assets, liabilities, equity, debt and overall financial position.
- P&L (Income Statement) Issues: Red flags related to the company's revenues, expenses, profits, and overall financial performance.
- Liquidity Issues: Concerns related to the company's ability to meet its short-term obligations, such as cash flow problems, debt repayment issues, or insufficient working capital.
- Management and Strategy related Issues: Concerns related to leadership, governance, decision-making processes, overall strategy, vision, and direction.
- Regulatory Issues: Concerns related Compliance with laws, regulations.
- Industry and Market Issues: Concerns related Position within the industry, market trends, and competitive landscape.
- Operational Issues: Concerns related Internal processes, systems, and infrastructure.
 
While categorizing the red flags strictly adhere to the following guidelines:
1. Please review the below red flags and assign each one to the most relevant category.
2. Do not loose information from the Original Quotes keep them as it is.
3. If a red flag could fit into multiple categories, please assign it to the one that seems most closely related, do not leave any flag unclassified or fit it into multiple categories.
4. While classifying, classify it in a such a way that the flags come under the categories along with their content. Strictly do not create a new category stick to what is mentioned above like an "Additional Red Flags", classify the flags in the above mentioned category only.
5. Do not repeat a category more than once in the output.
 
**Output Format**:
### Balance Sheet Issues
- [Red flag 1 with original quote]
- [Red flag 2 with original quote]
 
### P&L (Income Statement) Issues
- [Red flag 1 with original quote]
- [Red flag 2 with original quote]
 
### Liquidity Issues
- [Red flag 1 with original quote]
- [Red flag 2 with original quote]
 
### Management and Strategy related Issues
- [Red flag 1 with original quote]
- [Red flag 2 with original quote]
 
### Regulatory Issues
- [Red flag 1 with original quote]
- [Red flag 2 with original quote]
 
### Industry and Market Issues
- [Red flag 1 with original quote]
- [Red flag 2 with original quote]
 
### Operational Issues
- [Red flag 1 with original quote]
- [Red flag 2 with original quote]
 
Continue this format for all categories, ensuring every red flag from the previous analysis is categorized properly."""
       
        third_full_prompt = f"""You must answer the question strictly based on the below given context.
 
Context:
{pipeline_1st.docs[0]["context"]}
 
Previous Analysis: {second_response}
 
Based on the above analysis and the original context, please answer: {third_prompt}
 
Answer:"""
       
        third_response = pipeline_1st.llm._call(third_full_prompt, max_tokens=4000)
       
        # ITERATION 4: Detailed summary generation
        print("Running 4th iteration - Summary Generation...")
        fourth_prompt = """Based on the categorized red flags from the previous analysis, provide a comprehensive and detailed summary of each category of red flags in bullet point format. Follow these guidelines:
 
1. **Retain all information**: Ensure that no details are omitted or lost during the summarization process
2. **Maintain a neutral tone**: Present the summary in a factual and objective manner, avoiding any emotional or biased language
3. **Focus on factual content**: Base the summary solely on the information associated with each red flag, without introducing external opinions or assumptions
4. **Include all red flags**: Incorporate every red flag within the category into the summary, without exception
5. **Balance detail and concision**: Provide a summary that is both thorough and concise, avoiding unnecessary elaboration while still conveying all essential information
6. **Incorporate quantitative data**: Wherever possible, include quantitative data and statistics to support the summary and provide additional context
7. **Category-specific content**: Ensure that the summary is generated based solely on the content present within each category
8. **Summary should be factual**: Avoid any subjective interpretations or opinions
9. **Use bullet points**: Each red flag should be summarized as a separate bullet point with key details and data points
 
Format the output exactly like this example:
### Balance Sheet Issues
* [Summary of red flag 1 with specific data points and factual information]
* [Summary of red flag 2 with specific data points and factual information]
* [Summary of red flag 3 with specific data points and factual information]
 
### P&L (Income Statement) Issues  
* [Summary of red flag 1 with specific data points and factual information]
* [Summary of red flag 2 with specific data points and factual information]
* [Summary of red flag 3 with specific data points and factual information]
 
### Liquidity Issues
* [Summary of red flag 1 with specific data points and factual information]
* [Summary of red flag 2 with specific data points and factual information]
 
### Management and Strategy related Issues
* [Summary of red flag 1 with specific data points and factual information]
* [Summary of red flag 2 with specific data points and factual information]
 
### Regulatory Issues
* [Summary of red flag 1 with specific data points and factual information]
* [Summary of red flag 2 with specific data points and factual information]
 
### Industry and Market Issues
* [Summary of red flag 1 with specific data points and factual information]
* [Summary of red flag 2 with specific data points and factual information]
 
### Operational Issues
* [Summary of red flag 1 with specific data points and factual information]
* [Summary of red flag 2 with specific data points and factual information]
 
Continue this format for all 7 categories. Each bullet point should be a concise summary that captures the key details of each red flag within that category, including relevant quantitative data where available."""
       
        fourth_full_prompt = f"""You must answer the question strictly based on the below given context.
 
Context:
{pipeline_1st.docs[0]["context"]}
 
Previous Analysis: {third_response}
 
Based on the above analysis and the original context, please answer: {fourth_prompt}
 
Answer:"""
       
        fourth_response = pipeline_1st.llm._call(fourth_full_prompt, max_tokens=4000)
       
        # ITERATION 5: Individual Risk Classification for 15 Criteria using 2nd iteration results
        print("Running 5th iteration - Individual Criteria Risk Classification...")
       
        # Get individual criteria prompts
        criteria_prompts = create_individual_criteria_prompts()
        
        # Process each criterion individually using 2nd iteration results
        criteria_results = []
        
        for criteria_name, criteria_prompt in criteria_prompts.items():
            print(f"Evaluating criterion: {criteria_name}")
            
            # Create full prompt using 2nd iteration results and previous year data
            full_prompt = f"""You must answer the question strictly based on the below given context.

Context:
{pipeline_1st.docs[0]["context"]}

Deduplicated Red Flags Analysis:
{second_response}

Previous Year Data:
{previous_year_data}

Based on the above context and deduplicated analysis, please answer: {criteria_prompt}

Answer:"""
            
            # Get response from Azure OpenAI
            criterion_response = pipeline_1st.llm._call(full_prompt, max_tokens=1000)
            
            # Parse the response
            parsed_result = parse_individual_risk_assessment(criterion_response)
            
            # Store results
            criteria_results.append({
                "criteria": criteria_name,
                "prompt": criteria_prompt,
                "response": criterion_response,
                "parsed_result": parsed_result
            })
            
            # Small delay to avoid overwhelming the API
            time.sleep(1)
       
        # Calculate flag distribution from individual criteria results
        print("Calculating flag distribution...")
        flag_distribution = calculate_flag_distribution(criteria_results)
        
        # Create enhanced summary for HIGH RISK flags only (1-2 lines each)
        print("Creating high risk flag summaries...")
        high_risk_summaries = create_enhanced_summary(criteria_results)
        
        # Parse summary by categories from 4th iteration (SAME AS ORIGINAL)
        print("Parsing summary by categories...")
        summary_by_categories = parse_summary_by_categories(fourth_response)
       
        # Extract company information from first page
        print("Extracting company information...")
        company_info = extract_company_info_from_pdf(pdf_path, pipeline_1st.llm)
        print(f"Identified company: {company_info}")
       
        # Create Word document (SAME FORMAT AS ORIGINAL)
        print("Creating Word document...")
        word_doc_path = create_word_document(
            pdf_name=pdf_name,
            company_info=company_info,
            flag_distribution=flag_distribution,
            high_risk_summaries=high_risk_summaries,
            summary_by_categories=summary_by_categories,
            output_folder=output_folder
        )
       
        # Save all results together
        timestamp = time.strftime("%Y%m%d_%H%M%S")
        all_results = pd.DataFrame({
            "pdf_name": [pdf_name, pdf_name, pdf_name, pdf_name, pdf_name],
            "iteration": [1, 2, 3, 4, 5],
            "stage": [
                "Initial Analysis",
                "Enhanced Deduplication",
                "Categorization",
                "Summary Generation",
                "Individual Criteria Risk Classification"
            ],
            "prompt": [
                first_results_df.iloc[0]['query'],  # Original query from 1st iteration
                second_prompt,
                third_prompt,
                fourth_prompt,
                "Individual Risk Classification for 15 criteria using 2nd iteration results"
            ],
            "response": [
                first_response,
                second_response,
                third_response,
                fourth_response,
                json.dumps([r['response'] for r in criteria_results])  # All criteria responses
            ],
            "timestamp": [timestamp, timestamp, timestamp, timestamp, timestamp]
        })
       
        # Save complete results
        complete_output_file = os.path.join(output_folder, f"{pdf_name}_enhanced_5iteration_pipeline_results.csv")
        all_results.to_csv(complete_output_file, index=False)
       
        # Save detailed individual risk classification results
        detailed_risk_df = pd.DataFrame([
            {
                'criteria': r['criteria'],
                'summary': r['parsed_result']['summary'],
                'risk_level': r['parsed_result']['risk_level'],
                'full_response': r['response']
            }
            for r in criteria_results
        ])
        detailed_risk_output_file = os.path.join(output_folder, f"{pdf_name}_detailed_risk_classification.csv")
        detailed_risk_df.to_csv(detailed_risk_output_file, index=False)
        
        # Save flag distribution summary
        flag_distribution_df = pd.DataFrame([
            {'Risk_Level': level, 'Count': count}
            for level, count in flag_distribution.items()
        ])
        flag_dist_output_file = os.path.join(output_folder, f"{pdf_name}_flag_distribution.csv")
        flag_distribution_df.to_csv(flag_dist_output_file, index=False)
       
        print(f"Enhanced 5-iteration pipeline finished for {pdf_name}!")
        print(f"CSV Results saved to: {complete_output_file}")
        print(f"Detailed risk classification saved to: {detailed_risk_output_file}")
        print(f"Flag distribution saved to: {flag_dist_output_file}")
        print(f"Enhanced Word document saved to: {word_doc_path}")
        print(f"Flag Distribution: {flag_distribution}")
       
        return all_results
       
    except Exception as e:
        print(f"Error processing {pdf_name}: {str(e)}")
        # Save error log
        error_df = pd.DataFrame({
            "pdf_name": [pdf_name],
            "error": [str(e)],
            "timestamp": [time.strftime("%Y%m%d_%H%M%S")]
        })
        error_file = os.path.join(output_folder, f"{pdf_name}_error_log.csv")
        error_df.to_csv(error_file, index=False)
        return None
 
def run_multiple_pdfs_enhanced_five_iterations_pipeline(pdf_folder_path: str, queries_csv_path: str, previous_year_data: str, 
                                                      output_folder: str = "results",
                                                      api_key: str = None, azure_endpoint: str = None, 
                                                      api_version: str = None, deployment_name: str = "gpt-4.1-mini"):
    """
    Process multiple PDFs from a folder through the enhanced 5-iteration pipeline
    """
   
    # Create output folder if it doesn't exist
    os.makedirs(output_folder, exist_ok=True)
   
    # Get all PDF files from the folder
    pdf_files = glob.glob(os.path.join(pdf_folder_path, "*.pdf"))
   
    if not pdf_files:
        print(f"No PDF files found in {pdf_folder_path}")
        return
   
    print(f"Found {len(pdf_files)} PDF files to process:")
    for pdf_file in pdf_files:
        print(f"  - {os.path.basename(pdf_file)}")
   
    print(f"\nStarting enhanced batch processing with deduplication and individual criteria...")
    print(f"Output folder: {output_folder}")
    print("=" * 60)
   
    # Process each PDF
    successful_processing = []
    failed_processing = []
   
    for i, pdf_file in enumerate(pdf_files, 1):
        print(f"\n[{i}/{len(pdf_files)}] Processing: {os.path.basename(pdf_file)}")
       
        try:
            result = process_single_pdf_enhanced_five_iterations(
                pdf_path=pdf_file,
                queries_csv_path=queries_csv_path,
                previous_year_data=previous_year_data,
                output_folder=output_folder,
                api_key=api_key,
                azure_endpoint=azure_endpoint,
                api_version=api_version,
                deployment_name=deployment_name
            )
           
            if result is not None:
                successful_processing.append(os.path.basename(pdf_file))
            else:
                failed_processing.append(os.path.basename(pdf_file))
               
        except Exception as e:
            print(f"Failed to process {os.path.basename(pdf_file)}: {str(e)}")
            failed_processing.append(os.path.basename(pdf_file))
   
    if successful_processing:
        print(f"\nSuccessfully processed:")
        for file in successful_processing:
            print(f"  ✓ {file}")
   
    if failed_processing:
        print(f"\nFailed to process:")
        for file in failed_processing:
            print(f"  ✗ {file}")

def main_enhanced_batch_processing():
    """
    Main function to run the enhanced batch processing with Azure OpenAI GPT-4.1-mini
    """
    
    # Configuration
    pdf_folder_path = r"ola_pdf"
    queries_csv_path = r"EWS_prompts_v2.xlsx"      
    output_folder = r"ola_results_enhanced_individual_criteria"
    
    api_key = "8496bd1da40242a2"
    azure_endpoint = "https://crisil-pp-gpt.op"
    api_version = "2025-01-01-preview"
    deployment_name = "gpt-4.1-mini"
  
    previous_year_data = """
Previous reported Debt	 5,684 Cr	Mar-24
Current quarter ebidta	 (525) Cr	Mar-25
Previous reported asset value	 7,735 Cr	Mar-24
Previous reported receivable days	12 days	Mar-24
Previous reported payable days	112days	Mar-24
Previous reported revenue	 1,045 Cr	Dec-24
Previous reported profitability	 (460)Cr	Dec-24
Previous reported operating margin	-44.00%	Dec-24
Previous reported cash balance	 1,663 Cr	Mar-24
Previous reported current liabilities	 1,071 Cr	Mar-24 
"""
 
    run_multiple_pdfs_enhanced_five_iterations_pipeline(
        pdf_folder_path=pdf_folder_path,
        queries_csv_path=queries_csv_path,
        previous_year_data=previous_year_data,
        output_folder=output_folder,
        api_key=api_key,
        azure_endpoint=azure_endpoint,
        api_version=api_version,
        deployment_name=deployment_name
    )
 
if __name__ == "__main__":
    main_enhanced_batch_processing()
